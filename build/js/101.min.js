var ops=[["!",'boolean "not"'],["#","power, find index"],["$","copy from stack, sort"],["%","mod, split, map"],["&",'bitwise/setwise "and", if-then'],["(","decrement, uncons from left"],[")","increment, uncons from right"],["*","multiply, join, repeat, fold (reduce)"],["+","add, concat"],[",","range, length, filter"],["-","subtract, remove"],[".",'infix "vector" operator, must be followed by a binary operator or a block; applies that operator or block on two arrays, item by item, creating an array with the results'],["/","divide, split, each"],[":","infix operator, can be followed by: 1) variable name 2) set variable 3) unary operator - map 4) binary operator - fold (reduce)"],[";","pop and discard"],["<","compare, slice"],["=","compare, array get, find value"],[">","compare, slice"],["?","if (ternary)"],["@","rotate top 3 elements on the stack"],["[","start array"],["\\","swap top 2 elements on the stack"],["]","end array"],["^","bitwise xor, symmetric difference"],["_","duplicate top element on the stack"],["`","string representation"],["a","wrap in array"],["b","base conversion"],["c","convert to char"],["d","convert to double"],["e","followed by numeric literal - infix operator, calculates *10x (as in the scientific notation)"],["f","infix operator, can be followed by: 1) variable name - for loop 2) binary operator 3) block - map with extra parameter"],["g","do-while loop that pops the condition, signum, get from url"],["h","do-while loop that leaves the condition on the stack"],["i","convert to integer"],["j","memoize"],["l","read line"],["m","followed by numeric literal - subtract (same as - but avoids the need for a space after it)"],["o","print value"],["p","print string representation and newline"],["q","read the whole input"],["r","read token (whitespace-separated)"],["s","convert to string (char array)"],["t","array set"],["w","while loop"],["z","zip (transpose), abs"],["|",'bitwise/setwise "or", if-else'],["~",'bitwise "not", eval, dump array'],["e!","unique permutations"],["e#","line comment (not really an operator)"],["e%","string formatting a la printf"],["e&","logical and"],["e*","repeat each item in an array"],["e<","min of 2 values"],["e=","count occurrences"],["e>","max of 2 values"],["e[","pad array to the left"],["e\\","swap 2 array items"],["e]","pad array to the right"],["e_","flatten array"],["e`","RLE encode"],["ea","command-line args"],["ed","debug (show stack contents)"],["ee","enumerate array"],["el","lowercase"],["er","transliteration (element replacement)"],["es","timestamp (milliseconds from the epoch)"],["et","local time"],["eu","uppercase"],["ew","overlapping slices"],["e|","logical or"],["e~","RLE decode"],["m!","factorial, permutations with duplicates"],["m*","cartesian product, cartesian power"],["m<","bit shift, rotate left"],["m>","bit shift, rotate right"],["mC","arccos"],["mF","factorization with exponents"],["mL","log with base"],["mO","round with precision"],["mQ","integer square root"],["mR","random choice"],["mS","arcsin"],["mT","arctan"],["m[","floor"],["m]","ceil"],["ma","atan2"],["mc","cos"],["md","divmod"],["me","exp"],["mf","factorization"],["mh","hypot"],["ml","ln (natural logarithm)"],["mo","round"],["mp","prime"],["mq","sqrt"],["mr","random number, shuffle"],["ms","sin"],["mt","tan"]],vars=[["A","10"],["B","11"],["C","12"],["D","13"],["E","14"],["F","15"],["G","16"],["H","17"],["I","18"],["J","19"],["K","20"],["L",'"" (same as [])'],["M",'""'],["N","newline string"],["O",'""'],["P","pi (3.141592653589793)"],["Q",'""'],["R",'""'],["S",'" " (space)'],["T","0"],["U","0"],["V","0"],["W","-1"],["X","1"],["Y","2"],["Z","3"]],Explainer={tokenize:function(e){for(var t=[],a=0,r="",o="",l=!1,n=!1,i=!1,s="",p=0;p<e.length;p++){var u=(e[p-1],e[p]),c=e[p+1];if(0>a)throw new Error("CJam syntax error");i?(s+=u,("\n"===u||void 0===c)&&(i=!1,t.push({level:a,type:"comment",value:s}),s="",a--)):l?'"'===c?"\\"===u?(o+='"',p++):(o+=u,t.push({level:a,type:"string",value:o}),o="",l=!1,n=!0):o+=u:/[\s]/g.test(u)?t.push({level:a,type:"whitespace",value:u}):"{"===u?(a++,t.push({level:a,type:"block",value:u})):"}"===u?(t.push({level:a,type:"block",value:u}),a--):'"'===u?(l=!n,n=!1):"'"===u?(t.push({level:a,type:"char",value:c}),p++):"m"===u||"e"===u?/[0-9]/g.test(c)?t.push({level:a,type:"op1",value:u}):(t.push({level:a,type:"op2",value:u+c}),p++,u+c==="e#"&&(i=!0,a++)):/[A-Z]/g.test(u)?t.push({level:a,type:"var",value:u}):"-"===u?/[0-9]/g.test(c)||"."===c&&/[0-9]/g.test(e[p+2])?r+=u:t.push({level:a,type:"op1",value:u}):"."===u?/[0-9]/g.test(c)?r+=u:(r&&(t.push({level:a,type:"num",value:r}),r=""),t.push({level:a,type:"op1",value:u})):/[0-9\-]/g.test(u)?(r+=u,/[0-9\.]/g.test(c)||(t.push({level:a,type:"num",value:r}),r="")):t.push({level:a,type:"op1",value:u})}return t},explain:function(e){for(var t=[],a=0;a<e.length;a++){{var r=(e[a-1],e[a]);e[a+1]}if("block"===r.type)t.push({text:"<b>"+r.value+"</b>: Block "+("{"===r.value?"begin":"end")+"."});else if("string"===r.type)t.push({text:'<b>"'+r.value+'"</b>: Push string literal "'+r.value+'" onto the stack.'});else if("num"===r.type)t.push({text:"<b>"+r.value+'</b>: Push numeric literal "'+r.value+'" onto the stack.'});else if("op1"===r.type||"op2"===r.type){var o=ops.filter(function(e){return e[0]===r.value})[0];if(-1!==r.value.indexOf("undefined"))throw new Error('Unfinished operator: <b>"'+r.value.replace("undefined","")+'"</b>.');if(!o)throw new Error('Undefined operator: <b>"'+r.value+'"</b>.');t.push({text:"<b>"+r.value+"</b>: "+o[1]})}else if("var"===r.type)t.push({text:"<b>"+r.value+"</b>: Push pre-defined variable "+r.value+", default value is "+vars.filter(function(e){return e[0]===r.value})[0][1]+", onto the stack."});else if("char"===r.type)t.push({text:'<b>"'+r.value+'"</b>: Push character literal "'+r.value+'" onto the stack.'});else if("comment"===r.type)t.push({text:'Comment: <b>"'+r.value.trim()+'"</b>.'});else{if("whitespace"!==r.type)throw new Error('Unknown token ({ type: "'+r.type+'", value: "'+r.value+'" })');t.push({text:""})}}return t},toHtml:function(e,t){var a="",r=-1;return e.forEach(function(e,o){r<e.level?a+='<b class="level"></b><ul>':r>e.level&&(a+="</ul>"),r=e.level,t[o].text&&(a+='<li data-value="'+e.value+'" data-type="'+e.type+'" data-level="'+e.level+'">'+t[o].text+"</li>")}),a}};